rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can create their own user document, and can only read/update their own.
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get, update: if request.auth.uid == userId;
    }

    // Generic rule for user-owned collections
    function isOwner(collectionName) {
      return {
        // User can get, update, or delete their own document
        "match": "/" + collectionName + "/{docId}",
        "allow": ["get", "update", "delete"],
        "if": request.auth.uid == get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.userId
      },
      {
        // User can create a document
        "match": "/" + collectionName + "/{docId}",
        "allow": "create",
        "if": request.auth.uid == request.resource.data.userId
      },
      {
        // User can list documents but ONLY if they are querying by their own userId
        "match": "/" + collectionName + "/{docId}",
        "allow": "list",
        "if": request.auth.uid == request.query.where.userId
      }
    }

    match /appointments/{docId} {
      allow read, write: if isOwner('appointments');
    }

    match /vitals/{docId} {
      allow read, write: if isOwner('vitals');
    }

    match /prescriptions/{docId} {
      allow read, write: if isOwner('prescriptions');
    }

    match /journalEntries/{docId} {
      allow read, write: if isOwner('journalEntries');
    }

    match /hearingTestHistory/{docId} {
      allow read, write: if isOwner('hearingTestHistory');
    }

    match /eyeTestHistory/{docId} {
      allow read, write: if isOwner('eyeTestHistory');
    }

    match /responseTimeHistory/{docId} {
      allow read, write: if isOwner('responseTimeHistory');
    }
  }
}
